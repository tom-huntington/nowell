from operator import eq

read . str.splitlines . enumerate . (starmap \i r -> r |> enumerate starmap (j c -> i complex j pair (c |> ((eq '.') _ (-1 K) conditional int) ) )) . flatten . dict .
(grid -> grid |> dict.items filter (values . (eq 0)) map (keys . box . (splititerate (
def step(trails, grid):
    print("heights ", [grid[x] for x in trails], trails)
    nines = []
    new_trails = []
    for pos, old_height in ((t+dir, grid[t]) for t in trails for dir in [1,-1,1j,-1j]):
        if grid.get(pos, None) == old_height+1:
            if grid.get(pos, None) == 9: 
                print(f"add nine, pos {pos} old_height: {old_height}")
                nines.append(pos)
            else: 
                new_trails.append(pos)
    print(new_trails, len(nines))
    return (new_trails, nines)

grid
)

)
. (stopat (keys . not)) . (map values) 
. flatten . set . len
) |> sum

)